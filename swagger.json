{
    "openapi": "3.0.1",
    "info": {
        "version": "5.0.0",
        "title": "Swagger test",
        "description": "API documentation for project Drink. Кокте́йль (англ. cocktail) — напиток, получаемый смешиванием нескольких компонентов. Чаще всего коктейли представляют собой либо комбинацию спиртных напитков, либо бесполезную детскую смесь. Коктейли сильно различаются в разных регионах мира, поэтому наш проект призван для публикации как оригинальных рецептов, так и своих собственных интерпретаций старых и более известных коктейлей.",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "consumes": ["application/json", "multipart/form-data"],
    "produces": ["application/json"],
    "servers": [{ "url": "https://drink-master-server.onrender.com" }],
    "tags": [
        {
            "name": "Auth",
            "description": "Authorization endpoints"
        },
        {
            "name": "Users",
            "description": "Endpoint for requesting information about the user"
        },
        {
            "name": "Filters",
            "description": "Endpoint for backend data filtering"
        },
        {
            "name": "Drinks",
            "description": "Endpoint for handling cocktails."
        }
    ],
    "paths": {
        "/auth/signup": {
            "post": {
            "tags": ["Auth"],
            "summary": "Sign up new user - User registration",
            "parameters": [],
            "requestBody": {
                "description": "# Description of the request parameters:\n**name** - string, user name.\n**email** - string, user email.\n**password** - string, encrypted user password. \n**birthdate** - date, user's date of birth",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/RegistrationRequest"
                        }
                    }
                }
            },
            "responses": {
                "201": {
                    "description": "Successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationResponse"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Bad Request",
                    "content": {}
                },
                "409": {
                    "description": "Email in use",
                    "content": {}
                }
            }
            }
        },
        "/auth/verify/{verificationToken}": {
            "get": {
                "tags": ["Auth"],
                "summery": "Verify email",
                "parameters": [{
                    "name": "verificationToken",
                    "required": "true",
                    "in": "path",
                    "schema": {
                        "type": "string"
                    }
                }],
                "description": "Верифікація email - процес підтвердження вказаної користувачем при реєстрації електронної адреси. Після реєстрації, на вакзану користувачем електронну адресу буде надісланий електронний лист, в тілі якого буде посилання з відповідним ендпоінтом та унікальним кодом верифікації. Після підтвердження дійсності електронної адреси, користувач зможе пройти процедуру авторизації (signin)",
                "responses": {
                    "200": {
                        "description": "Verification successful",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyResponse"
                            }
                        }
                    }
                    },
                    "404": {
                        "description": "Bearer auth failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Description of the error."
                                        }
                                    }
                                },
                                "example": {
                                    "message": "Not authorized."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/verify/": {
            "post": {
                "tags": ["Auth"],
                "summery": "Resend verify email",
                "parameters": [],
                "description": "",
                "requestBody": {
                    "description": "# Description of the request parameters:\n**email** - string, user email.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/ResendVerifyBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Verification email sent",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResendVerifyResponse"
                            }
                        }
                    }
                    },
                    "400": {
                        "description": "Verification has already been passed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Verification has already been passed"
                                        }
                                    }
                                },
                                "example": {
                                    "message": "Verification has already been passed"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "User not found"
                                        }
                                    }
                                },
                                "example": {
                                    "message": "User not found"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "tags": ["Auth"],
                "summary": "Sign in existing user",
                "parameters": [],
                "requestBody": {
                    "description": "# Description of the request parameters:\n**email** - string, user email.\n **password** - string, encrypted user password.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/SignInDto"
                            }
                        }
                    }
                },
            "responses": {
                "200": {
                    "description": "Created session for existing user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationResponse"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Bad request",
                    "content": {"application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "Bad request"
                                    }
                                }
                            },
                            "example": {
                                "message": "Bad request"
                            }
                        }}
                },
                "401": {
                    "description": "Email or password is wrong",
                    "content": {"application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "Email or password is wrong"
                                    }
                                }
                            },
                            "example": {
                                "message": "Email or password is wrong"
                            }
                        }}
                },
                "403": {
                    "description": "Forbidden",
                    "content": {"application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "Forbidden"
                                    }
                                }
                            },
                            "example": {
                                "message": "Forbidden"
                            }
                        }}
                },
                "404": {
                    "description": "Not found",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "Not found"
                                    }
                                }
                            },
                            "example": {
                                "message": "Not found"
                            }
                        }
                    }
                }
            }
            }
        },
        "/auth/signout": {
            "post": {
                "tags": ["Auth"],
                "summary": "Signs out user",
                "parameters": [],
                "description": "**Ендпоінт логауту** - це механізм виходу з системи, який припиняє дію сесії користувача та знищує токен доступу, що був виданий при попередній аутентифікації.\n**Опис:** Коли користувач натискає кнопку вийти з системи, він робить запит на URL/auth/signout з валідним токеном у заголовку Authorization. Сервер перевіряє валідність токена, якщо токен є дійсним, то сесія користувача закривається, токен видаляється і користувач повертається на сторінку входу в систему. Якщо токен не є валідним, то сервер повертає статус 401 і повідомляє про невалідність токена.",
                "security": [{ "Bearer": [] }],
                "responses": {
                "204": {
                    "description": "User signed out"
                },
                "401": {
                    "description": "Not authorized",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "Description of the error."
                                    }
                                }
                            },
                            "example": {
                                "message": "Not authorized."
                            }
                        }
                    }
                }
            }
            }
        },
        "/users/current": {
            "get": {
                "tags": ["Users"],
                "summary": "Information about the user",
                "parameters": [],
                "description": "Information about the user",
                "security": [{ "Bearer": [] }],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CurrentResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Description of the error."
                                        }
                                    }
                                },
                                "example": {
                                    "message": "Not authorized."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/update": {
            "patch": {
                "tags": ["Users"],
                "summary": "Updating user information",
                "consumes": ["multipart/form-data", "application/json"],
                "parameters": [],
                "description": "Updating user information",
                "security": [{ "Bearer": [] }],
                "requestBody": {
                    "description": "# Description of the request parameters:\n**name** - string, user name.",
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "in": "formData",
                                "type": "object",
                                "properties": {
                                    "image": {
                                        "type": "file",
                                        "format": "binary"
                                    }  
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Description of the error."
                                        }
                                    }
                                },
                                "example": {
                                    "message": "Not authorized."
                                }
                            }
                        }
                    } 
                }
            }
        },
        "/users/subscribe": {
            "post": {
                "tags": ["Users"],
                "summary": "Subscription to information mailing",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "requestBody": {
                    "description": "# Description of the request parameters:\n**email** - string, user email.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubscribeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Subscribtion successful. Letters about subscribtion was sent to your email ..."
                                        }  
                                    }
                                },
                                "example": {
                                    "message": "Subscribtion successful. Letters about subscribtion was sent to your email ..."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Description of the error."
                                        }
                                    }
                                },
                                "example": {
                                    "message": "Not authorized."
                                }
                            }
                        }
                    }
                }
            }
        },

        "/filters/categories": {
            "get": {
                "tags": ["Filters"],
                "summary": "Getting a list of cocktail categories",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/filters/ingredients": {
            "get": {
                "tags": ["Filters"],
                "summary": "Getting the ingredients list",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/filters/glasses": {
            "get": {
                "tags": ["Filters"],
                "summary": "Obtaining a list of the glass to be served",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/mainpage": {
            "get": {
                "tags": ["Drinks"],
                "summary": "Getting cocktails for the main page",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/popular": {
            "get": {
                "tags": ["Drinks"],
                "summary": "Getting popular cocktails",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/search": {
            "get": {
                "tags": ["Drinks"],
                "summary": "Getting cocktails by category + ingredient + keyword",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/{id}": {
            "get": {
                "tags": ["Drinks"],
                "summary": "Get one cocktail per ID",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/own/add": {
            "post": {
                "tags": ["Drinks"],
                "summary": "Adding your own cocktail",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/own/remove": {
            "delete": {
                "tags": ["Drinks"],
                "summary": "Deleting your own cocktail",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/own": {
            "get": {
                "tags": ["Drinks"],
                "summary": "Getting your own cocktails",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/favorite/add": {
            "post": {
                "tags": ["Drinks"],
                "summary": "Adding a cocktail to favorites",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/favorite/remove": {
            "delete": {
                "tags": ["Drinks"],
                "summary": "Removing a cocktail from favorites",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        },
        "/drinks/favorite": {
            "get": {
                "tags": ["Drinks"],
                "summary": "Getting cocktails from favorites",
                "parameters": [],
                "description": "",
                "security": [{ "Bearer": [] }],
                "responses": {
                    
                }
            }
        }
    },
    "components": {
        "schemas": {
            "RegistrationRequest": {
                "type": "object",
                "required": ["name", "email", "password", "birthdate"],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "User's name",
                        "example": "Oleksandr"
                    },
                    "email": {
                        "type": "string",
                        "description": "User's email",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password",
                        "example": "qwerty123"
                    },
                    "birthdate": {
                        "type": "date",
                        "description": "User's birthdate",
                        "example": "01.01.2000"
                    }
                }
            },
            "RegistrationResponse": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "User's token",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MTA5MzAyM2MwNmVmNjEyNDEyNzE3ZSIsImlhdCI6MTY5NTU4NTAyNiwiZXhwIjoxNjk1NjY3ODI2fQ.Y2uXGZHuC6poRda96zbJk1SFe0HY0BOZnOvzGaOd0-o"
                    },
                    "user": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Username",
                                "example": "Oleksandr"
                            },
                            "email": {
                                "type": "string",
                                "description": "User's email",
                                "format": "email"
                            },
                            "avatarURL": {
                                "type": "string",
                                "description": "User's email",
                                "example": "http://gravatar/sdfsdf"
                            }
                        } 
                    }
                },
                "example": {
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MTA5MzAyM2MwNmVmNjEyNDEyNzE3ZSIsImlhdCI6MTY5NTU4NTAyNiwiZXhwIjoxNjk1NjY3ODI2fQ.Y2uXGZHuC6poRda96zbJk1SFe0HY0BOZnOvzGaOd0-o",
                    "user": { 
                        "name": "Oleksandr", 
                        "email": "1@gmail.com",  
                        "avatarURL": "http://gravatar/sdfsdf" 
                    }
                }
            },
            "ResendVerifyBody": {
                "type": "object",
                "required": ["email"],
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email",
                        "format": "email"
                    }
                }
            },
            "VerifyResponse": {
                "type": "object",
                "required": ["message"],
                "properties": {
                    "massage": {
                        "type": "string",
                        "description": "Verify message",
                        "example": "Verification successful"
                    }
                }
            },
            "ResendVerifyResponse": {
                "type": "object",
                "required": ["message"],
                "properties": {
                    "massage": {
                        "type": "string",
                        "description": "Verification email sent",
                        "example": "Verification email sent"
                    }
                }
            },
            "SignInDto": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password",
                        "example": "qwerty123"
                    }
                }
            },
            "CurrentResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "objectId",
                        "description": "User id",
                        "example": "skfhku4424otjrelgd"
                    },
                    "name": {
                        "type": "string",
                        "description": "Username",
                        "example": "Oleksandr"
                    },
                    "email": {
                        "type": "string",
                        "description": "User's email",
                        "format": "email"
                    },
                    "avatarURL": {
                        "type": "string",
                        "description": "User's avatar",
                        "example": "https://res.cloudinary.com/dxvnh0oip/image/upload/v1695434633/avatars/User_vzgcyg.png"
                    }
                },
                "example": {
                    "_id": "skfhku4424otjrelgd",
                    "name": "Oleksandr", 
                    "email": "1@gmail.com", 
                    "avatarURL": "https://res.cloudinary.com/dxvnh0oip/image/upload/v1695434633/avatars/User_vzgcyg.png" 
                }
            },
            "UpdateUserRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Username",
                        "example": "Mykola"
                    }
                }
            },
            "UpdateUserResponse": {
                "type": "object",
                "properties": {
                    "avatarURL": {
                        "type": "string",
                        "description": "User's avatar",
                        "example": "http://gravatar/sdfsdf"
                    },
                    "name": {
                        "type": "string",
                        "description": "Username",
                        "example": "Mykola"
                    }
                }
            },
            "SubscribeRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email",
                        "format": "email"
                    }
                }
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}